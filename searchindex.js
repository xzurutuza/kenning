Search.setIndex({"titles": ["Using Kenning via command line arguments", "Deep Learning deployment stack", "Kenning", "Introduction", "Defining optimization pipelines in Kenning", "Kenning API", "Developing Kenning blocks", "Creating applications with Kenning", "Kenning measurements", "ONNX support in deep learning frameworks", "Kenning", "Sample autogenerated report"], "terms": {"provid": [0, 1, 3, 4, 5, 6, 7, 9, 10], "sever": [0, 6, 9, 10], "script": [0, 2, 3, 4, 5, 6, 7], "compil": [0, 2, 3, 5, 6, 8, 9, 10], "benchmark": [0, 5, 11], "deep": [0, 2, 3, 5, 10], "learn": [0, 2, 3, 5, 10], "variou": [0, 1, 3, 4, 5, 6, 7, 9, 10], "The": [0, 1, 3, 4, 5, 6, 7, 9, 10, 11], "execut": [0, 1, 2, 3, 4, 5, 6, 10], "ar": [0, 1, 4, 5, 6, 7, 8, 9, 10], "present": [0, 5, 6, 7, 9], "scenario": [0, 1, 3, 4, 6, 7, 8, 9, 10, 11], "modul": [0, 4, 5, 6, 7, 8], "sampl": [0, 1, 2, 3, 5, 6, 7, 10], "bash": 0, "locat": [0, 1, 4], "directori": [0, 4, 5, 6, 9, 10], "repositori": 0, "runnabl": 0, "requir": [0, 1, 4, 5, 6, 9, 10], "implement": [0, 1, 2, 4, 5, 9], "from": [0, 2, 4, 5, 6, 7, 9, 10], "core": [0, 4, 5, 8, 9, 10], "action": [0, 1, 4, 5, 7, 11], "each": [0, 1, 4, 5, 6, 7, 9, 10], "dataset": [0, 2, 4, 6, 8, 10], "modelwrapp": [0, 2, 4, 6, 7, 10, 11], "optim": [0, 2, 3, 6, 7, 8, 9, 11], "other": [0, 1, 4, 5, 6, 7, 10], "can": [0, 1, 4, 5, 6, 7, 10], "configur": [0, 4, 5, 6, 7, 10], "work": [0, 5, 6, 8], "an": [0, 1, 3, 4, 5, 6, 7, 9, 10], "object": [0, 1, 4, 5, 6, 7, 10], "given": [0, 1, 5, 6, 7, 9, 10], "form_argpars": [0, 5, 6, 10], "from_argpars": [0, 5, 6, 10], "method": [0, 4, 5, 7, 8, 9, 10], "former": [0, 10], "creat": [0, 2, 3, 4, 5, 6, 9, 10], "argpars": [0, 5, 6], "group": [0, 5, 6, 10], "its": [0, 2, 3, 5, 7, 10], "paramet": [0, 1, 4, 5, 6, 7, 8, 10, 11], "latter": [0, 4, 7, 10], "take": [0, 4, 5, 10], "pars": [0, 5, 6, 7, 10], "return": [0, 4, 5, 6, 7], "model_train": [0, 10], "": [0, 1, 4, 5, 6, 7, 9, 10, 11], "To": [0, 4, 6, 7, 10], "get": [0, 4, 5, 6, 7, 10], "list": [0, 1, 4, 5, 6, 7, 8, 9, 10], "select": [0, 1], "i": [0, 1, 2, 4, 7, 8, 9, 10, 11], "e": [0, 1, 4, 5, 6, 7, 10], "tensorflowpetdatasetmobilenetv2": [0, 4, 5, 6, 10, 11], "petdataset": [0, 4, 5, 6, 10, 11], "python": [0, 2, 4, 6, 7, 8, 9, 11], "m": [0, 4, 7, 9, 10, 11], "classif": [0, 1, 2, 4, 5, 6, 10], "tensorflow_pet_dataset": [0, 4, 5, 6, 10, 11], "pet_dataset": [0, 4, 6, 10, 11], "h": 0, "thi": [0, 1, 3, 4, 5, 6, 7, 9, 10, 11], "possibl": [0, 1, 4, 5, 6, 9, 10], "For": [0, 4, 5, 6, 10], "abov": [0, 4, 5, 6, 7, 10], "call": [0, 1, 5, 6, 10], "output": [0, 1, 4, 5, 7, 10], "follow": [0, 1, 3, 4, 5, 6, 7, 10, 11], "posit": [0, 7], "modelwrappercl": 0, "base": [0, 1, 4, 5, 6, 7, 10, 11], "import": [0, 5, 6, 9, 10], "datasetcl": 0, "option": [0, 4, 5, 6, 7, 10], "help": [0, 6], "show": [0, 1, 5, 7, 9, 10], "messag": [0, 5], "exit": [0, 5], "batch": [0, 4, 5, 10, 11], "size": [0, 4, 5, 7, 10, 11], "batch_siz": [0, 4, 5], "rate": [0, 1, 5, 10], "learning_r": [0, 5], "num": [0, 10], "epoch": [0, 1, 5, 10], "num_epoch": 0, "number": [0, 1, 5], "logdir": [0, 5, 10], "path": [0, 4, 5, 6, 7, 10, 11], "log": [0, 5, 10], "verbos": [0, 4, 10, 11], "debug": 0, "info": [0, 4, 10, 11], "warn": 0, "error": [0, 4, 5, 6, 9], "critic": 0, "level": [0, 5, 6, 11], "model_path": [0, 4, 6, 7, 10, 11], "root": [0, 4, 5, 10, 11], "dataset_root": [0, 4, 6, 10, 11], "download": [0, 4, 5, 7, 9, 10, 11], "befor": [0, 1, 4, 5, 6, 10], "ani": [0, 1, 4, 5, 6, 7, 9, 10], "inference_batch_s": [0, 11], "input": [0, 1, 4, 5, 7, 10, 11], "data": [0, 1, 3, 4, 6, 7, 10], "classifi": [0, 4, 5], "speci": [0, 4], "breed": [0, 4, 11], "determin": [0, 4, 5], "should": [0, 1, 4, 5, 6, 7, 10], "imag": [0, 1, 4, 5, 7, 10], "memori": [0, 4, 5, 7, 8, 10], "layout": [0, 4], "nhwc": [0, 4, 11], "nchw": [0, 4, 7, 10], "deliv": [0, 4, 5, 6, 7], "format": [0, 3, 4, 5, 6, 7, 8, 9, 10], "depend": [0, 1, 4, 5, 10], "At": 0, "end": [0, 1, 5, 6, 9, 10], "build": [0, 2, 4, 6, 9, 10], "pet": [0, 2, 4, 5, 6, 10], "h5": [0, 4, 5, 6, 10, 11], "32": [0, 10], "0": [0, 4, 5, 6, 10, 11], "0001": [0, 10], "50": [0, 10, 11], "save": [0, 1, 4, 5, 6, 7, 10, 11], "inference_perform": 0, "wa": [0, 5, 6, 9, 11], "It": [0, 1, 4, 5, 6, 9], "you": [0, 5, 6, 7], "wrap": [0, 5, 6], "applic": [0, 1, 2, 3, 4, 8, 10], "json": [0, 2, 3, 5, 6, 8, 10], "file": [0, 4, 5, 6, 7, 10], "qualiti": [0, 1, 2, 4, 5, 8, 10], "metric": [0, 1, 2, 4, 5, 10], "gather": [0, 3, 5], "dure": [0, 1, 3, 5, 6, 7, 9, 10, 11], "exampl": [0, 2, 4, 5, 6, 9], "tensorflow_pet_dataset_mobilenetv2": [0, 4, 6, 10, 11], "resourc": [0, 4, 5, 6, 7, 10, 11], "load": [0, 4, 5, 6, 10], "all": [0, 5, 6, 8, 10], "collect": [0, 4, 5, 6, 8, 10], "throughout": [0, 10], "store": [0, 5, 7, 8, 10], "later": [0, 1, 4, 5, 6, 10], "render": [0, 5, 10], "onnx_convers": [0, 9], "empir": [0, 5], "contain": [0, 4, 5, 6, 8, 10, 11], "support": [0, 2, 3, 4, 5, 10], "matrix": [0, 4, 5, 8, 10, 11], "tell": [0, 6], "u": [0, 10], "export": [0, 5, 9], "avail": [0, 1, 3, 4, 5, 6, 7], "onnxconvers": [0, 2, 9], "below": [0, 10], "rst": [0, 5, 10], "convert": [0, 5, 6, 9, 10], "onnxconvert": [0, 9, 10], "pytorch": [0, 5, 9, 10], "pytorchonnxconvers": [0, 9], "tensorflow": [0, 2, 4, 5, 6, 9], "tensorflowonnxconvers": [0, 9], "mxnet": [0, 9, 10], "mxnetonnxconvers": [0, 9], "three": [0, 6, 7], "successfulli": [0, 1, 5], "final": [0, 1, 5, 10], "inference_test": [0, 10, 11], "inference_serv": [0, 10], "either": [0, 1, 4, 5, 7], "local": [0, 2, 5, 7, 10], "remot": [0, 2, 5, 7], "receiv": [0, 4, 5], "send": [0, 4, 5, 7, 10], "statist": [0, 5], "both": [0, 5, 6, 7, 10], "runtim": [0, 2, 4, 8, 10, 11], "flow": [0, 3, 4, 7, 10], "commun": [0, 4, 5, 10], "protocol": [0, 4, 10], "runtimeprotocol": [0, 2, 4, 10], "form": [0, 5, 6, 8], "extract": [0, 5], "o": [0, 2, 4, 7], "process": [0, 1, 3, 4, 6, 7, 8, 10], "fetch": [0, 4, 5, 10], "evalu": [0, 1, 2, 3, 5, 8, 10], "need": [0, 1, 4, 5, 6, 7, 10], "when": [0, 4, 5, 6], "print": 0, "python3": [0, 4], "tvm": [0, 2, 4, 5, 6], "tvmruntim": [0, 4, 5, 10, 11], "modelcompil": 0, "cl": [0, 6, 11], "tvmcompil": [0, 4, 5, 10, 11], "network": [0, 1, 4, 6, 10], "networkprotocol": [0, 4, 5], "With": [0, 7, 10], "look": [0, 4, 6, 7, 10], "runtimecl": 0, "modelcompiler_cl": 0, "routin": [0, 1, 5, 10], "protocol_cl": 0, "between": [0, 1, 4, 5, 6, 9, 10], "tester": 0, "runner": [0, 2, 10], "convert_to_onnx": 0, "here": [0, 1, 4, 5, 6, 10], "compiled_model_path": [0, 4, 5, 6, 10, 11], "kera": [0, 5, 6, 10, 11], "darknet": [0, 5], "type": [0, 4, 5, 10, 11], "wise": [0, 5], "kind": 0, "tag": [0, 5], "devic": [0, 1, 2, 3, 5, 7, 8, 10, 11], "host": [0, 4, 5, 10], "target_host": [0, 11], "cpu": [0, 2, 4, 5, 8, 10], "opt": [0, 11], "opt_level": [0, 4, 10, 11], "libdarknet": [0, 11], "libdarknet_path": [0, 11], "so": [0, 1, 4, 5, 7, 10, 11], "librari": [0, 1, 2, 4, 5, 6], "save_model_path": [0, 4, 6, 7, 10, 11], "where": [0, 5, 6, 9, 10], "upload": [0, 5], "context": [0, 11], "llvm": [0, 4, 10, 11], "stackvm": 0, "c": [0, 1, 10], "cuda": [0, 1], "nvptx": 0, "opencl": [0, 1], "aocl": 0, "aocl_sw_emu": 0, "sdaccel": 0, "vulkan": 0, "metal": 0, "vpi": 0, "rocm": [0, 1], "ext_dev": 0, "hexagon": 0, "webgpu": 0, "what": [0, 10], "acceler": [0, 1, 5], "id": [0, 5, 6], "target_device_context_id": [0, 11], "dtype": [0, 5, 6, 7], "input_dtyp": 0, "tensor": [0, 1, 5, 6], "element": [0, 4, 5], "address": [0, 4, 10], "port": [0, 4], "packet": [0, 4], "packet_s": [0, 4], "maximum": 0, "byte": [0, 5], "endian": 0, "big": 0, "littl": 0, "transfer": [0, 1], "onli": [0, 4, 6, 8, 10], "mai": [0, 1, 4, 5, 6, 10], "some": [0, 1, 4, 5, 6, 10], "addit": [0, 1, 5, 6, 7, 10], "flag": [0, 5, 6, 10], "tflite": [0, 4, 6, 10], "tfliteruntim": [0, 5, 6, 10], "googl": [0, 1, 10], "coral": [0, 10], "devboard": 0, "tflitecompil": [0, 4, 5, 10], "edgetpu": [0, 10], "int8": [0, 1, 4, 6, 10], "192": 0, "168": 0, "188": 0, "35": 0, "12345": [0, 4, 5], "32768": [0, 4], "home": 0, "mendel": 0, "1": [0, 4, 5, 6, 7, 9, 10, 11], "setup": 0, "deleg": 0, "libedgetpu": 0, "also": [0, 1, 4, 5, 6, 7, 10], "case": [0, 1, 2, 4, 5, 6, 7], "skip": [0, 10], "tar": [0, 4, 10, 11], "3": [0, 4, 6, 7, 9, 10, 11], "more": [0, 4, 6, 7, 10], "check": [0, 4, 5, 6, 7, 10], "client": [0, 4, 5, 7], "server": [0, 4, 5], "found": [0, 1, 4, 5, 6, 7, 10], "edg": [0, 3, 10], "inference_runn": 0, "pre": [0, 1], "specif": [0, 1, 2, 6, 7, 8, 10], "dataprovid": [0, 2, 7, 10], "sourc": [0, 1, 5, 7, 10, 11], "outputcollector": [0, 2, 6, 7, 10], "detector": [0, 7], "darknet_coco": 0, "tvmdarknetcocoyolov3": [0, 5], "camera_dataprovid": [0, 7], "cameradataprovid": [0, 5, 7], "collector": [0, 5, 6], "name_print": 0, "nameprint": 0, "dataprovidercl": 0, "output_collector": 0, "result": [0, 1, 4, 5, 6, 7, 10], "pass": [0, 4, 5, 6, 7, 10], "open": [0, 1, 5, 6, 9, 10], "name": [0, 4, 5, 6, 9, 10], "csv": 0, "open_images_classes_extractor": 0, "disabl": [0, 10], "vm": 0, "relai": 0, "virtualmachin": 0, "encod": [0, 5], "base64": 0, "arrai": [0, 5, 6, 7], "video": [0, 1, 5, 7], "video_file_path": [0, 7], "camera": [0, 5, 7, 10], "dev": [0, 7], "videox": 0, "x": [0, 5], "eg": [0, 5], "video0": [0, 7], "width": 0, "image_width": 0, "height": 0, "image_height": 0, "detection_visu": [0, 6], "detectionvisu": [0, 5, 6], "detect": [0, 1, 5, 6, 7, 10], "yolov3": [0, 5, 10], "weight": [0, 1, 4, 10], "thei": [0, 4, 5, 7, 8, 10], "analyz": [0, 5], "visual": [0, 5, 7, 10], "render_report": [0, 10, 11], "inform": [0, 4, 5, 6, 8, 10], "along": [0, 1, 5, 6, 8, 10], "sphinx": [0, 10], "ref": 0, "figur": [0, 5], "dir": [0, 10, 11], "specifi": [0, 1, 4, 6, 7, 10], "document": [0, 3, 6, 7, 10], "embed": [0, 8], "comput": [0, 1, 5, 8, 10], "rel": [0, 1], "img": [0, 10, 11], "which": [0, 4, 5, 6, 7, 10], "describ": [0, 1, 3, 5, 6, 7, 8, 10], "fall": 0, "observ": [0, 5, 10], "autogener": [0, 2, 3, 5], "As": [0, 4, 10], "now": [0, 7], "most": [0, 1, 4, 5, 9, 10], "common": [0, 1, 4, 5, 6, 8], "about": [0, 6, 10], "overal": [0, 5, 8], "time": [0, 1, 5, 10], "usag": [0, 2, 3, 4, 5, 6, 8, 9], "ram": [0, 5], "gpu": [0, 4, 5, 8, 10], "util": [0, 1, 4, 5, 8, 10], "task": [0, 5, 10, 11], "confus": [0, 4, 8, 10, 11], "matric": 0, "accuraci": [0, 5, 10, 11], "precis": [0, 1, 5, 10, 11], "g": [0, 1, 4, 5, 6, 7, 10, 11], "mean": [0, 4, 5, 6, 10, 11], "recal": 0, "curv": 0, "averag": 0, "chapter": [1, 3, 6], "typic": [1, 3], "perform": [1, 2, 4, 5, 7, 10], "target": [1, 2, 4, 5, 10, 11], "A": [1, 5, 6, 7], "deploi": [1, 3, 4], "iot": 1, "usual": [1, 5, 6, 10, 11], "goe": [1, 5], "through": [1, 4, 5], "undergo": 1, "analysi": [1, 5, 7], "loader": 1, "preprocess": [1, 4, 5, 6, 7, 10], "design": [1, 5, 10], "scratch": 1, "baselin": 1, "wide": 1, "exist": [1, 4, 5, 7, 10], "semant": 1, "segment": [1, 5, 6], "instanc": [1, 5, 7, 10], "etc": [1, 4, 5], "adjust": [1, 10], "particular": [1, 5, 10], "us": [1, 2, 3, 5, 7, 8, 9], "loss": [1, 10], "function": [1, 5, 6, 7, 10], "algorithm": [1, 9], "improv": [1, 5, 10], "represent": [1, 5, 9], "If": [1, 4, 5, 6, 7], "differ": [1, 4, 5, 6, 9, 10], "re": 1, "set": [1, 5, 7, 8, 10, 11], "audio": 1, "signal": [1, 6], "sequenc": [1, 4, 7], "oct": 1, "sensor": [1, 4], "associ": [1, 5, 7], "class": [1, 2, 4, 5, 7, 8, 9, 10], "mask": [1, 9], "descript": [1, 3, 4, 6], "split": [1, 5], "categori": 1, "largest": 1, "subset": [1, 5, 10], "valid": [1, 5, 7], "small": [1, 10], "verifi": [1, 5], "after": [1, 5, 6, 7, 10], "valu": [1, 4, 5, 6, 9], "overfit": 1, "occur": 1, "test": [1, 2, 4, 5, 9, 10], "act": [1, 4, 5], "mutual": 1, "exclus": 1, "bias": 1, "wai": [1, 3, 4, 5, 6, 10], "kaggl": 1, "search": 1, "univers": 1, "page": 1, "voic": 1, "current": [1, 5, 6, 10], "popular": [1, 9], "approach": [1, 4, 10], "find": [1, 5], "fit": [1, 4, 5], "problem": [1, 5, 6, 8, 10], "adapt": 1, "In": [1, 2, 4, 5, 6, 7, 10], "layer": [1, 5, 6], "slightli": 1, "modifi": [1, 6, 10], "new": [1, 2, 3, 5, 7, 9], "These": [1, 7, 10], "updat": [1, 5, 6, 9], "unfrozen": 1, "larger": [1, 10], "veri": [1, 10], "fine": 1, "tune": 1, "better": [1, 4, 10], "start": [1, 3, 4, 5], "point": [1, 4, 6, 10], "allow": [1, 4, 5, 6, 7, 9, 10], "correctli": 1, "smaller": [1, 10], "reduc": [1, 10], "intuit": 1, "behind": 1, "multipl": [1, 6, 7, 10], "featur": 1, "real": [1, 5, 10], "life": [1, 5], "environ": [1, 10, 11], "one": [1, 4, 5, 6, 7, 9, 10], "reus": 1, "anoth": [1, 4, 5, 6, 7, 9, 10], "onc": [1, 5], "selecet": 1, "adequ": 1, "order": [1, 4, 5, 6, 7, 10], "normal": [1, 6, 10], "resiz": 1, "especi": [1, 10], "quit": 1, "appli": [1, 4, 5, 7, 10], "reason": [1, 6], "augment": 1, "like": [1, 4, 5, 10], "random": [1, 5], "bright": 1, "contrast": 1, "crop": 1, "jitter": 1, "rotat": 1, "significantli": 1, "prevent": [1, 7], "proper": [1, 5, 10], "procedur": [1, 5], "step": [1, 3, 4, 5, 6, 10], "includ": [1, 5, 7, 10, 11], "regular": [1, 6, 10], "chanc": 1, "adam": 1, "adagrad": 1, "involv": 1, "hyperparamet": 1, "properli": 1, "ad": [1, 2, 4, 5, 6], "schedul": 1, "autom": [1, 4], "those": [1, 5], "lr": 1, "finder": 1, "earli": 1, "stop": [1, 5, 6], "introduc": [1, 5], "measur": [1, 2, 3, 4, 10, 11], "intermedi": [1, 5], "period": 1, "best": [1, 6], "accord": [1, 5], "run": [1, 2, 5, 6, 7, 8, 10, 11], "hardwar": [1, 2, 5, 10], "structur": [1, 2, 4, 5, 6], "fp32": [1, 10], "mix": 1, "fp16": 1, "oper": [1, 4, 5, 9, 10], "hand": 1, "benefit": 1, "chang": [1, 5, 10], "int4": 1, "straightforward": 1, "integ": [1, 5], "quantiz": [1, 4, 5, 6], "calibr": [1, 5, 6, 10], "without": [1, 5, 10], "siginific": 1, "fusion": [1, 5], "special": 1, "convolut": 1, "shape": [1, 5, 6, 7], "among": 1, "entir": [1, 5, 10], "prune": 1, "condit": [1, 5], "distil": 1, "teacher": 1, "suppos": [1, 5], "much": [1, 6], "same": [1, 4, 5, 6, 7, 10], "origin": [1, 5], "drop": 1, "transform": 1, "code": [1, 5, 6, 10], "program": [1, 5], "languag": [1, 5], "halid": 1, "java": 1, "machin": [1, 5, 9], "opengl": 1, "tensorrt": 1, "fpga": 1, "bitstream": 1, "effici": [1, 10], "introduct": 2, "instal": [2, 3], "deploy": [2, 3, 4, 10], "stack": [2, 3], "train": [2, 3, 4, 5, 6, 9, 10, 11], "prepar": [2, 5, 6, 10], "model": [2, 3, 7, 9], "defin": [2, 3, 5, 7, 10], "pipelin": [2, 3, 6, 8], "nativ": [2, 5], "framework": [2, 3, 5, 11], "singl": [2, 5, 7, 10], "via": [2, 3, 4, 5, 6, 10], "command": [2, 3, 4, 5, 6, 8, 10], "line": [2, 3, 4, 5, 6, 10], "argument": [2, 3, 4, 5, 10], "infer": [2, 4, 5, 6], "onnx": [2, 3, 5, 7, 10], "convers": [2, 4, 5, 10], "gener": [2, 3, 4, 5, 6, 9, 10], "report": [2, 3, 4, 9, 10], "grid": 2, "kenningflow": [2, 3], "develop": [2, 3, 4, 5, 10], "block": [2, 3, 4, 5, 7, 10], "metadata": [2, 5, 7], "compon": [2, 3, 10], "api": [2, 3, 4, 6, 9, 10], "overview": 2, "ken": [3, 9, 11], "consist": [3, 4, 5, 6, 7, 10], "section": [3, 9, 10, 11], "project": [3, 10], "quick": 3, "guid": 3, "advanc": [3, 4], "config": [3, 5, 7, 10], "projecturl": 3, "cover": 3, "depth": 3, "see": [4, 6, 9], "user": [4, 6, 10], "easi": [4, 10], "reproduc": 4, "notabl": 4, "chain": [4, 5], "One": [4, 10], "commonli": 4, "done": [4, 5], "json_inference_test": [4, 10], "dictionari": [4, 5, 6, 7], "have": [4, 5, 6, 10], "kei": [4, 5, 6, 10], "model_wrapp": [4, 6, 7, 10, 11], "mandatori": 4, "field": [4, 5, 6, 7], "accept": [4, 5, 6], "runtime_protocol": 4, "platform": [4, 8, 10], "appropri": [4, 5], "underli": [4, 10], "simplest": 4, "download_dataset": [4, 5, 10, 11], "true": [4, 5, 6, 10, 11], "mobilenetv2": [4, 5, 9, 10], "37": 4, "cat": [4, 11], "dog": [4, 11], "we": [4, 6, 7, 10], "full": [4, 5, 10], "dot": 4, "separ": [4, 5], "taken": [4, 5], "inherit": [4, 5, 6, 10], "child": 4, "arguments_structur": [4, 5, 6], "modelpath": [4, 5, 6, 10], "argparse_nam": [4, 6], "previous": 4, "come": [4, 5, 6], "int": [4, 5, 6], "default": [4, 5, 6, 10, 11], "bool": [4, 5, 6], "fals": [4, 5, 6, 10, 11], "classify_bi": [4, 11], "enum": [4, 6], "image_memory_layout": [4, 11], "visibl": 4, "anyth": [4, 5], "detail": [4, 6, 10], "run_infer": [4, 5], "assum": [4, 5, 6], "under": 4, "version": [4, 5, 8], "packag": 4, "torch": [4, 10], "read": [4, 5, 7, 10], "necessari": [4, 10], "predict": [4, 5, 6, 7, 8, 10], "directli": [4, 5, 6], "abl": [4, 10], "outcom": 4, "certain": [4, 8, 10], "desktop": 4, "subject": 4, "activ": [4, 5, 10], "lite": [4, 5, 6], "apach": [4, 6], "x86": [4, 10], "avx2": [4, 10], "vector": [4, 5, 10], "extens": [4, 10], "Such": [4, 10], "inference_input_typ": [4, 6, 10], "inference_output_typ": [4, 6, 10], "mcpu": [4, 10], "conv2d_data_layout": [4, 10, 11], "int8_tvm": [4, 10], "emphas": [4, 6], "two": [4, 5, 10], "entri": [4, 5, 6], "remain": [4, 6], "first": [4, 5, 6, 7, 10, 11], "consecut": [4, 6], "previou": [4, 5, 6, 7, 10], "next": [4, 5, 7], "cannot": 4, "too": 4, "larg": [4, 5, 10], "storag": [4, 10], "tool": 4, "doe": [4, 5, 6], "system": [4, 5], "json_inference_serv": [4, 10], "interfac": [4, 5, 10], "tcp": [4, 5, 10], "uart": [4, 5], "let": [4, 6, 10], "10": [4, 10], "9": [4, 9, 11], "8": 4, "7": [4, 6, 10, 11], "still": [4, 10], "postprocess": [4, 5, 6, 10], "compiled_model_serv": 4, "request": [4, 5, 6], "thing": [4, 6, 10], "direct": [4, 5], "sent": [4, 5], "them": [4, 5, 6, 10], "long": 4, "jsonconfig": 4, "Then": [4, 6, 10], "classificationjson": 4, "rest": [4, 5], "interact": 5, "green": 5, "repres": [5, 6, 7, 9, 10], "orang": 5, "grei": 5, "connect": [5, 6, 10], "displai": [5, 6, 10], "arrow": 5, "5": [5, 11], "cycl": [5, 7], "alreadi": [5, 10], "side": 5, "complet": 5, "depict": 5, "firstli": [5, 6, 9], "sinc": [5, 6, 10], "everi": [5, 8, 10], "ha": [5, 7, 10], "modif": 5, "lastli": [5, 9], "On": 5, "back": [5, 9], "compar": [5, 10], "ground": [5, 8], "truth": [5, 8], "passs": 5, "creation": 5, "arbitrari": [5, 7], "built": 5, "respons": 5, "io": 5, "compat": [5, 6, 9], "custom": [5, 7], "datasetprovid": 5, "modelrunn": 5, "non": 5, "linear": 5, "graph": 5, "predefin": 5, "must": [5, 7], "well": [5, 10], "inner": 5, "chosen": [5, 6], "pair": 5, "global": [5, 7], "uniqu": [5, 7], "variabl": [5, 6, 7], "place": [5, 7], "classmethod": [5, 6], "form_parameterschema": [5, 6], "schema": [5, 6], "dict": [5, 6], "from_json": 5, "runners_specif": 5, "str": [5, 6], "constructor": [5, 6, 7], "wrapper": [5, 6, 7, 10], "invok": 5, "main": 5, "repeatedli": 5, "construct": [5, 8], "loop": 5, "run_single_step": 5, "modelruntimerunn": [5, 7], "inputs_sourc": 5, "tupl": [5, 7], "inputs_spec": 5, "cleanup": [5, 6], "clean": [5, 6], "longer": 5, "json_dict": 5, "being": 5, "retriev": 5, "should_clos": [5, 6], "got": 5, "indic": [5, 6, 8, 10], "except": [5, 6, 9, 10], "close": [5, 6], "kenn": 5, "expect": [5, 7], "subdivis": 5, "purpos": [5, 6, 10], "submodul": [5, 10], "openimagesdatasetv6": 5, "randomizedclassificationdataset": 5, "external_calibration_dataset": [5, 11], "none": [5, 6, 7, 10], "iter": [5, 7], "over": [5, 10], "datax": 5, "datai": 5, "_dataindex": 5, "calibration_dataset_gener": [5, 6], "percentag": 5, "float": [5, 6, 10], "25": [5, 6, 11], "seed": 5, "fraction": 5, "state": [5, 9], "download_dataset_fun": 5, "solv": 5, "iou": 5, "map": [5, 6], "parser": [5, 10], "parent": 5, "correspond": [5, 10], "pointer": 5, "argumentpars": 5, "argumentgroup": 5, "arg": [5, 6], "get_class_nam": 5, "get_data": 5, "prepare_input_sampl": 5, "prepare_output_sampl": 5, "fill": 5, "whole": 5, "get_data_unload": 5, "get_input_mean_std": 5, "std": [5, 6], "compute_input_mean_std": 5, "standard": [5, 6, 11], "attribut": 5, "content": 5, "prepare_external_calibration_dataset": 5, "extern": 5, "scan": 5, "suitabl": 5, "By": 5, "usabl": 5, "make": 5, "sens": 5, "handl": [5, 6], "hot": 5, "set_batch_s": 5, "per": [5, 8, 9], "train_test_split_represent": 5, "test_fract": 5, "1234": 5, "validation_fract": 5, "leav": 5, "whether": [5, 6], "third": 5, "total": 5, "out": [5, 10], "neccessari": [5, 10], "regardless": [5, 10], "2": [5, 9, 11], "http": [5, 10], "github": [5, 10, 11], "com": [5, 10], "antmicro": [5, 10], "blob": 5, "py": [5, 6], "_": 5, "pytorchwrapp": 5, "tensorflowwrapp": 5, "pytorchpetdatasetmobilenetv2": 5, "tensorflowdatasetmobilenetv2": 5, "coco": 5, "from_fil": 5, "convert_input_to_byt": 5, "inputdata": 5, "preprocess_input": 5, "stream": 5, "convert_output_from_byt": 5, "outputdata": 5, "postprocess_output": 5, "raw": 5, "feed": 5, "derive_io_spec_from_json_param": 5, "deriv": 5, "get_io_specif": [5, 7], "couldn": 5, "t": 5, "absent": 5, "spec": [5, 6, 7], "unknown": 5, "dimens": [5, 7], "parameterschema": 5, "convei": 5, "modelspath": 5, "get_framework_and_vers": [5, 6], "get_io_specification_from_model": 5, "get_output_format": 5, "get_path": 5, "load_model": [5, 6], "parse_io_specification_from_json": 5, "initi": 5, "incomplet": 5, "fil": 5, "miss": 5, "y": 5, "unmodifi": 5, "prepare_model": 5, "whenev": 5, "actual": [5, 7], "model_prepar": 5, "readi": 5, "fed": 5, "save_model": 5, "save_to_onnx": 5, "test_infer": 5, "train_model": 5, "explicitli": 5, "th": 5, "inputmodelpath": [5, 6, 10], "io_spec": [5, 6], "binari": [5, 10], "otherwis": 5, "load_io_specif": [5, 6], "properti": 5, "consult_model_typ": 5, "previous_block": 5, "force_onnx": 5, "match": 5, "union": 5, "rais": [5, 6, 10], "valueerror": 5, "get_input_format": 5, "get_spec_path": 5, "concaten": 5, "save_io_specif": [5, 6, 10], "intern": 5, "do": [5, 10], "legal": 5, "prequantized_dtyp": [5, 6], "scale": [5, 6], "zero_point": [5, 6], "preserv": 5, "ouput": 5, "set_compiled_model_path": 5, "set_input_typ": 5, "inputtyp": [5, 6], "deliveri": 5, "collect_performance_data": 5, "up": [5, 6, 9, 11], "close_serv": 5, "get_io_spec_path": 5, "ndarrai": [5, 6, 7], "np": [5, 6], "obtain": [5, 6, 7], "inference_session_end": 5, "session": 5, "track": 5, "inference_session_start": 5, "enabl": 5, "correct": 5, "reorder": 5, "attributeerror": 5, "prepare_cli": 5, "prepare_input": 5, "input_data": [5, 6], "succed": 5, "modelnotloadederror": 5, "prepare_io_specif": 5, "io_specif": 5, "succesful": 5, "prepare_loc": 5, "alloc": [5, 11], "prepare_serv": 5, "self": [5, 6], "input_spec": 5, "doesn": 5, "noqa": 5, "e501": 5, "process_input": 5, "Not": [5, 9], "read_io_specif": 5, "output_spec": 5, "assign": 5, "run_client": 5, "compiledmodelpath": 5, "run_loc": [5, 10], "run_serv": 5, "wait": 5, "upload_essenti": 5, "upload_output": 5, "upload_stat": 5, "measurementscollector": [5, 10], "conduct": 5, "incom": 5, "speed": 5, "power": 5, "consumpt": 5, "success": [5, 9], "failur": 5, "notif": 5, "mention": [5, 10], "ok": 5, "stat": 5, "enclos": 5, "everyth": 5, "upon": 5, "confirm": 5, "just": [5, 10], "finish": [5, 6], "until": 5, "second": [5, 10], "within": 5, "transport": 5, "disconnect": 5, "least": [5, 6], "download_output": 5, "latest": 5, "statu": [5, 9], "download_statist": 5, "initialize_cli": 5, "initialize_serv": 5, "parse_messag": 5, "messagetyp": 5, "wait_for_act": 5, "accompani": 5, "receive_data": 5, "serverstatu": 5, "request_failur": 5, "fail": 5, "request_process": 5, "acknowledg": 5, "trigger": 5, "reach": 5, "own": 5, "request_success": 5, "b": 5, "send_data": 5, "upload_input": 5, "upload_io_specif": 5, "upload_model": 5, "arriv": 5, "seri": 5, "held": 5, "serializ": 5, "decor": 5, "raport": 5, "There": [5, 6, 8, 10], "than": [5, 6, 10], "explicit": 5, "accumul": 5, "measurementtyp": 5, "valuetoadd": 5, "initvaluefunc": 5, "callabl": 5, "lambda": 5, "add": [5, 6, 10], "numpi": [5, 7], "iadd": 5, "add_measur": 5, "initialvaluefunc": 5, "add_measurements_list": 5, "valueslist": 5, "clear": 5, "get_valu": 5, "initialize_measur": 5, "measurement_typ": 5, "empti": [5, 6], "meant": [5, 6], "probe": 5, "further": [5, 10], "update_measur": 5, "string": [5, 7], "append": [5, 6], "static": 5, "save_measur": [5, 10], "resultpath": 5, "systemstatscollector": 5, "prefix": [5, 8, 10], "thread": 5, "parallel": 5, "get_measur": 5, "_cpus_perc": [5, 8], "give": [5, 8], "_mem_perc": [5, 8], "_gpu_util": [5, 8], "_gpu_mem_util": [5, 8], "_timestamp": [5, 8], "timestamp": [5, 8], "n": [5, 8], "overrid": 5, "subclass": 5, "sequenti": 5, "keyword": 5, "kwarg": 5, "respect": [5, 6], "systemstatsmeasur": 5, "measurementnam": 5, "tagmeasur": 5, "tagnam": 5, "timemeasur": 5, "durat": [5, 11], "nanosecond": 5, "vice": 5, "versa": 5, "add_entri": 5, "modelgener": 5, "verif": 5, "modelentri": 5, "check_convers": 5, "modelsdir": 5, "onnx_export": 5, "exportpath": 5, "virtual": 5, "supportstatu": 5, "onnx_import": 5, "importpath": 5, "metho": 5, "microphon": 5, "captur": [5, 7], "frame": [5, 6, 7], "detach_from_sourc": 5, "detach": 5, "shutdown": 5, "fetch_input": 5, "baserealtimevisu": 5, "realtimedetectionvisu": [5, 7], "realtimesegmentationvisu": 5, "realtimeclassificationvisu": 5, "detach_from_output": 5, "process_output": [5, 6], "output_data": [5, 6], "bound": 5, "box": 5, "screen": [5, 10], "datacollector": 5, "gracefulli": 5, "press": 5, "break": 5, "ext": 6, "resnet50": [6, 9], "imagenet": 6, "input_0": 6, "224": 6, "0774157047271729": 6, "13": [6, 9], "float32": [6, 10], "output_0": 6, "1000": 6, "00390625": 6, "128": 6, "yolov4": [6, 7], "608": [6, 7], "255": 6, "76": 6, "38": 6, "19": [6, 11], "processed_output": 6, "detection_output": [6, 7], "dectobject": [6, 7], "four": 6, "processed_input": 6, "access": [6, 10], "dequant": 6, "zero": 6, "class_nam": 6, "human": 6, "readabl": 6, "deviat": [6, 11], "segmobject": 6, "understand": 6, "affect": 6, "crucial": [6, 10], "matter": [6, 10], "ones": 6, "minim": 6, "tensorflowlitecompil": 6, "newli": 6, "hold": 6, "termin": 6, "from_parameterschema": 6, "argument_nam": 6, "node": 6, "pathlib": 6, "boolean": 6, "is_list": 6, "nullabl": 6, "inferenceinputtyp": [6, 10], "uint8": 6, "inferenceoutputtyp": [6, 10], "quantize_model": 6, "dataset_percentag": [6, 10, 11], "how": [6, 10], "def": 6, "__init__": 6, "super": 6, "creator": 6, "automat": [6, 10], "seamless": [6, 10], "manner": 6, "outputtyp": 6, "kerasconvers": 6, "tensorflowconvers": 6, "tf": 6, "tfliteconvert": 6, "from_keras_model": 6, "from_saved_model": 6, "aspect": 6, "notimplementederror": [6, 10], "hint": 6, "stick": 6, "ensur": 6, "target_spec": 6, "supported_op": 6, "opsset": 6, "tflite_builtins_int8": 6, "as_dtyp": 6, "yield": 6, "representative_dataset": 6, "tflite_model": 6, "wb": 6, "f": 6, "write": [6, 9], "interpret": [6, 7, 10], "model_cont": 6, "signatur": 6, "get_signature_runn": 6, "update_io_spec": 6, "sig_det": 6, "int_det": 6, "enumer": 6, "old_nam": 6, "new_nam": 6, "det": 6, "new_spec": 6, "get_input_detail": 6, "get_output_detail": 6, "__version__": 6, "regard": 6, "snippet": 6, "consult": 6, "pythonpath": 6, "my_optim": 6, "demonstr": 6, "sum": 6, "almost": 6, "few": 6, "necessarili": 6, "gui": [6, 7], "alwai": [6, 10], "simpli": [6, 10], "output_width": 6, "output_height": 6, "cam_fram": [6, 7], "detection_data": [6, 7], "statement": 6, "becaus": 6, "want": [6, 10], "similar": 6, "quickli": [7, 10], "dedic": [7, 10], "famili": 7, "filesystem": 7, "grab": 7, "summari": [7, 10], "pack": 7, "definit": 7, "json_flow_runn": 7, "input_memory_layout": 7, "input_width": 7, "input_height": 7, "608x608": 7, "consid": [7, 10], "ndim": 7, "equal": 7, "length": 7, "rectangl": 7, "score": 7, "output_nam": 7, "input_nam": 7, "flow_scenario_detect": 7, "modelruntime_runn": 7, "onnxyolov4": 7, "onnxruntim": [7, 10], "execution_provid": 7, "cudaexecutionprovid": 7, "real_time_visu": [7, 10], "viewer_width": 7, "512": 7, "viewer_height": 7, "input_color_format": 7, "bgr": 7, "last": 7, "dearpygui": 7, "happen": [8, 10], "while": [8, 10], "across": [8, 9, 10], "scope": 8, "nvidia": [8, 10], "jetson": 8, "frequent": 9, "art": 9, "catch": 9, "issu": [9, 10], "md": [9, 10, 11], "ver": [9, 11], "cu117": 9, "densenet201": 9, "unsupport": 9, "deeplabv3": 9, "unverifi": 9, "faster": [9, 10], "r": 9, "cnn": 9, "fpn": 9, "retinanet": 9, "tabl": [9, 10], "row": 9, "column": 9, "cell": 9, "secondli": 9, "could": [9, 10], "due": 9, "lack": 9, "copyright": 10, "2020": 10, "2023": 10, "neural": 10, "ai": 10, "aim": 10, "toward": 10, "modular": 10, "manag": 10, "seamlessli": 10, "bring": 10, "yet": 10, "lot": 10, "matur": 10, "versatil": 10, "techniqu": 10, "would": 10, "extrem": 10, "spars": 10, "necess": 10, "entireti": 10, "signific": 10, "part": 10, "unifi": 10, "focus": 10, "rather": 10, "decid": 10, "switch": 10, "instead": 10, "reimplement": 10, "natur": 10, "stage": 10, "shown": 10, "basic": 10, "git": 10, "distinguish": 10, "extra": 10, "addon": 10, "nvidia_perf": 10, "object_detect": 10, "v6": 10, "vision": 10, "ire": 10, "doc": [10, 11], "sudo": 10, "egg": 10, "clone": 10, "cd": 10, "lf": 10, "pull": 10, "relat": 10, "draw": 10, "plot": 10, "templat": 10, "provis": 10, "recommend": 10, "simpl": 10, "go": 10, "our": 10, "against": 10, "titl": 10, "peform": 10, "native_": 10, "markdown": 10, "apart": 10, "link": 10, "aggreg": 10, "sensit": [10, 11], "ci": [10, 11], "seen": 10, "great": 10, "distribut": 10, "mani": 10, "cloud": 10, "fairli": 10, "varieti": 10, "product": 10, "focu": 10, "fast": 10, "lightweight": 10, "even": 10, "unus": 10, "highli": 10, "flatbuff": 10, "remov": 10, "presenc": 10, "worth": 10, "note": 10, "desir": 10, "bit": 10, "keep": 10, "unchang": 10, "ca": 10, "15x": 10, "2x": 10, "harm": 10, "stai": 10, "reduct": 10, "neglig": 10, "achiev": 10, "appear": 10, "background": 10, "share": 10, "40": 10, "3x": 10, "easili": 10, "interconnect": 10, "minor": 10, "alter": 10, "boost": 10, "9572730984": 10, "15": 10, "79405698": 10, "965973551": 10, "683232669": 10, "9519662539": 10, "02033412": 10, "41": 10, "61514549": 10, "9487005035": 10, "229375069": 10, "experi": 10, "And": 10, "modelframework": 10, "replac": 10, "extend": 10, "conform": 10, "rule": 10, "enhanc": 10, "overriden": 10, "control": 10, "oxford": 11, "iiit": 11, "11": 11, "null": 11, "target_device_context": 11, "runtime_use_vm": 11, "disable_performance_measur": 11, "model_framework": 11, "usr": 11, "lib": 11, "compile_use_vm": 11, "output_conversion_funct": 11, "conv2d_kernel_layout": 11, "use_fp16_precis": 11, "use_int8_precis": 11, "use_tensorrt": 11, "17529404300000806": 11, "16417127104653828": 11, "002196815747795452": 11, "median": 11, "16378020400009063": 11, "51": 11, "14232200839471": 11, "6": 11, "221318910822455": 11, "696697552862915": 11, "19819257109373487": 11, "957273098380732": 11, "top": 11, "9961899578173902": 11, "9574413909275928": 11, "9571990915922841": 11, "9566448082813757": 11}, "objects": {"kenning.core.dataprovider": [[5, 0, 1, 0, "DataProvider", "Detaches from the source during shutdown"]], "kenning.core.dataprovider.DataProvider": [[5, 1, 1, 0, "detach_from_source", "Detaches from the source during shutdown"], [5, 1, 1, 0, "fetch_input", "Gets the sample from device"], [5, 1, 1, 0, "form_argparse", "Creates argparse parser for the DataProvider object."], [5, 1, 1, 0, "from_argparse", "Constructor wrapper that takes the parameters from argparse args."], [5, 1, 1, 0, "prepare", "Prepares the source for data gathering depending on the source type."], [5, 1, 1, 0, "preprocess_input", "Performs provider-specific preprocessing of inputs"]], "kenning.core.dataprovider.DataProvider.from_argparse": [[5, 2, 2, 0, "args", "arguments from ArgumentParser object"]], "kenning.core.dataprovider.DataProvider.preprocess_input": [[5, 2, 2, 0, "data", "the data to be preprocessed"]], "kenning.core.dataset": [[5, 0, 1, 0, "Dataset", "Wraps the datasets for training, evaluation and optimization."]], "kenning.core.dataset.Dataset": [[5, 3, 1, 0, "_dataindex", "ID of the next data to be delivered for inference"], [5, 3, 1, 0, "batch_size", "The batch size for the dataset"], [5, 1, 1, 0, "calibration_dataset_generator", "Creates generator for the calibration data."], [5, 3, 1, 0, "dataX", "List of input data (or data representing input data, i.e. file paths)"], [5, 3, 1, 0, "dataY", "List of output data (or data representing output data)"], [5, 1, 1, 0, "download_dataset_fun", "Downloads the dataset to the root directory defined in the constructor."], [5, 1, 1, 0, "evaluate", "Evaluates the model based on the predictions."], [5, 1, 1, 0, "form_argparse", "Creates argparse parser for the Dataset object."], [5, 1, 1, 0, "form_parameterschema", "Creates schema for the Dataset class."], [5, 1, 1, 0, "from_argparse", "Constructor wrapper that takes the parameters from argparse args."], [5, 1, 1, 0, "from_json", "Constructor wrapper that takes the parameters from json dict."], [5, 1, 1, 0, "get_class_names", "Returns list of class names in order of their IDs."], [5, 1, 1, 0, "get_data", "Returns the tuple of all inputs and outputs for the dataset."], [5, 1, 1, 0, "get_data_unloaded", "Returns the input and output representations before loading."], [5, 1, 1, 0, "get_input_mean_std", "Returns mean and std values for input tensors."], [5, 1, 1, 0, "prepare", "Prepares dataX and dataY attributes based on the dataset contents."], [5, 1, 1, 0, "prepare_external_calibration_dataset", "Prepares the data for external calibration dataset."], [5, 1, 1, 0, "prepare_input_samples", "Preprocesses input samples, i.e. load images from files, converts them."], [5, 1, 1, 0, "prepare_output_samples", "Preprocesses output samples."], [5, 1, 1, 0, "set_batch_size", "Sets the batch size of the data in the iterator batches."], [5, 1, 1, 0, "train_test_split_representations", "Splits the data representations into train dataset and test dataset."]], "kenning.core.dataset.Dataset.calibration_dataset_generator": [[5, 2, 2, 0, "percentage", "The fraction of data to use for calibration"], [5, 2, 2, 0, "seed", "The seed for random state"]], "kenning.core.dataset.Dataset.evaluate": [[5, 2, 2, 0, "predictions", "The list of predictions from the model"], [5, 2, 2, 0, "truth", "The ground truth for given batch"]], "kenning.core.dataset.Dataset.from_argparse": [[5, 2, 2, 0, "args", "arguments from ArgumentParser object"]], "kenning.core.dataset.Dataset.from_json": [[5, 2, 2, 0, "json_dict", "Arguments for the constructor"]], "kenning.core.dataset.Dataset.prepare_input_samples": [[5, 2, 2, 0, "samples", "List of input samples to be processed"]], "kenning.core.dataset.Dataset.prepare_output_samples": [[5, 2, 2, 0, "samples", "List of output samples to be processed"]], "kenning.core.dataset.Dataset.set_batch_size": [[5, 2, 2, 0, "batch_size", "Number of input samples per batch"]], "kenning.core.dataset.Dataset.train_test_split_representations": [[5, 2, 2, 0, "seed", "The seed for random state"], [5, 2, 2, 0, "test_fraction", "The fraction of data to leave for model validation"], [5, 2, 2, 0, "validation", "Whether to return a third, validation dataset"], [5, 2, 2, 0, "validation_fraction", "The fraction (of the total size) that should be split out of the training set"]], "kenning.core.flow": [[5, 0, 1, 0, "KenningFlow", "Allows for creation of custom flows using Kenning core classes."]], "kenning.core.flow.KenningFlow": [[5, 1, 1, 0, "form_parameterschema", "Creates schema for the KenningFlow class"], [5, 1, 1, 0, "from_json", "Constructor wrapper that takes the parameters from json dict."], [5, 1, 1, 0, "run", "Main process function. Repeatedly runs constructed graph in a loop."], [5, 1, 1, 0, "run_single_step", "Runs flow one time."]], "kenning.core.flow.KenningFlow.from_json": [[5, 2, 2, 0, "runners_specifications", "List of runners that creates the flow."]], "kenning.core": [[5, 4, 0, 1, "measurements", ""]], "kenning.core.measurements": [[5, 0, 1, 0, "Measurements", "Stores benchmark measurements for later processing."], [5, 0, 1, 0, "MeasurementsCollector", "It is a 'static' class collecting measurements from various sources."], [5, 0, 1, 0, "SystemStatsCollector", "It is a separate thread used for collecting system statistics."], [5, 5, 1, 0, "systemstatsmeasurements", "Decorator for measuring memory usage of the function."], [5, 5, 1, 0, "tagmeasurements", "Decorator for adding tags for measurements and saving their timestamps."], [5, 5, 1, 0, "timemeasurements", "Decorator for measuring time of the function."]], "kenning.core.measurements.Measurements": [[5, 1, 1, 0, "accumulate", "Adds given value to a measurement."], [5, 1, 1, 0, "add_measurement", "Add new value to a given measurement type."], [5, 1, 1, 0, "add_measurements_list", "Adds new values to a given measurement type."], [5, 1, 1, 0, "clear", "Clears measurement data."], [5, 3, 1, 0, "data", "Dictionary storing lists of values"], [5, 1, 1, 0, "get_values", "Returns list of values for a given measurement type."], [5, 1, 1, 0, "initialize_measurement", "Sets the initial value for a given measurement type."], [5, 1, 1, 0, "update_measurements", "Adds measurements of types given in the other object."]], "kenning.core.measurements.Measurements.add_measurements_list": [[5, 2, 2, 0, "measurementtype", "the measurement type to be updated"], [5, 2, 2, 0, "valueslist", "the list of values to add"]], "kenning.core.measurements.Measurements.get_values": [[5, 2, 2, 0, "measurementtype", "The name of the measurement type"]], "kenning.core.measurements.Measurements.initialize_measurement": [[5, 2, 2, 0, "measurement_type", "The type (name) of the measurement"], [5, 2, 2, 0, "value", "The initial value for the measurement type"]], "kenning.core.measurements.Measurements.update_measurements": [[5, 2, 2, 0, "other", "A dictionary or another Measurements object that contains lists in every entry."]], "kenning.core.measurements.MeasurementsCollector": [[5, 1, 1, 0, "clear", "Clears measurement data."], [5, 1, 1, 0, "save_measurements", "Saves measurements to JSON file."]], "kenning.core.measurements.MeasurementsCollector.save_measurements": [[5, 2, 2, 0, "resultpath", "Path to the saved JSON file"]], "kenning.core.measurements.SystemStatsCollector": [[5, 1, 1, 0, "get_measurements", "Returns measurements from the thread."], [5, 1, 1, 0, "run", "Method representing the thread's activity."]], "kenning.core.measurements.systemstatsmeasurements": [[5, 2, 2, 0, "measurementname", "The name of the measurement type."], [5, 2, 2, 0, "step", "The step for the measurements, in seconds"]], "kenning.core.measurements.tagmeasurements": [[5, 2, 2, 0, "tagname", "The name of tag."]], "kenning.core.measurements.timemeasurements": [[5, 2, 2, 0, "measurementname", "The name of the measurement type."]], "kenning.core.model": [[5, 0, 1, 0, "ModelWrapper", "Wraps the given model."]], "kenning.core.model.ModelWrapper": [[5, 1, 1, 0, "convert_input_to_bytes", "Converts the input returned by the preprocess_input method to bytes."], [5, 1, 1, 0, "convert_output_from_bytes", "Converts bytes array to the model output format."], [5, 1, 1, 0, "derive_io_spec_from_json_params", "Creates IO specification by deriving parameters from parsed JSON dictionary. The resulting IO specification may differ from the results of get_io_specification, information that couldn't be retrieved from JSON parameters are absent from final IO spec or are filled with general value (example: '-1' for unknown dimension shape)"], [5, 1, 1, 0, "form_argparse", "Creates argparse parser for the ModelWrapper object."], [5, 1, 1, 0, "form_parameterschema", "Creates schema for the ModelWrapper class."], [5, 1, 1, 0, "from_argparse", "Constructor wrapper that takes the parameters from argparse args."], [5, 1, 1, 0, "from_json", "Constructor wrapper that takes the parameters from json dict."], [5, 1, 1, 0, "get_framework_and_version", "Returns name of the framework and its version in a form of a tuple."], [5, 1, 1, 0, "get_io_specification", "Returns a saved dictionary with input and output keys that map to input and output specifications."], [5, 1, 1, 0, "get_io_specification_from_model", "Returns a new instance of dictionary with input and output keys that map to input and output specifications."], [5, 1, 1, 0, "get_output_formats", "Returns list of names of possible output formats."], [5, 1, 1, 0, "get_path", "Returns path to the model in a form of a Path object."], [5, 1, 1, 0, "load_model", "Loads the model from file."], [5, 1, 1, 0, "parse_io_specification_from_json", "Return dictionary with 'input' and 'output' keys that will map to input and output specification of an object created by the argument json schema"], [5, 1, 1, 0, "postprocess_outputs", "Processes the outputs for a given model."], [5, 1, 1, 0, "prepare_model", "Downloads the model (if required) and loads it to the device."], [5, 1, 1, 0, "preprocess_input", "Preprocesses the inputs for a given model before inference."], [5, 1, 1, 0, "run_inference", "Runs inference for a given preprocessed input."], [5, 1, 1, 0, "save_model", "Saves the model to file."], [5, 1, 1, 0, "save_to_onnx", "Saves the model in the ONNX format."], [5, 1, 1, 0, "test_inference", "Runs the inference with a given dataset."], [5, 1, 1, 0, "train_model", "Trains the model with a given dataset."]], "kenning.core.model.ModelWrapper.convert_input_to_bytes": [[5, 2, 2, 0, "inputdata", "The preprocessed inputs"]], "kenning.core.model.ModelWrapper.convert_output_from_bytes": [[5, 2, 2, 0, "outputdata", "Output data in raw bytes"]], "kenning.core.model.ModelWrapper.derive_io_spec_from_json_params": [[5, 2, 2, 0, "json_dict", "JSON dictionary formed by parsing the input JSON with ModelWrapper's parameterschema"]], "kenning.core.model.ModelWrapper.from_argparse": [[5, 2, 2, 0, "args", "Arguments from ArgumentParser object"], [5, 2, 2, 0, "dataset", "The dataset object to feed to the model"], [5, 2, 2, 0, "from_file", "Determines if the model should be loaded from modelspath"]], "kenning.core.model.ModelWrapper.from_json": [[5, 2, 2, 0, "dataset", "The dataset object to feed to the model"], [5, 2, 2, 0, "from_file", "Determines if the model should be loaded from modelspath"], [5, 2, 2, 0, "json_dict", "Arguments for the constructor"]], "kenning.core.model.ModelWrapper.load_model": [[5, 2, 2, 0, "modelpath", "Path to the model file"]], "kenning.core.model.ModelWrapper.parse_io_specification_from_json": [[5, 2, 2, 0, "json_dict", "Parameters for object constructor in JSON format."]], "kenning.core.model.ModelWrapper.postprocess_outputs": [[5, 2, 2, 0, "y", "The output from the model"]], "kenning.core.model.ModelWrapper.preprocess_input": [[5, 2, 2, 0, "X", "The input data from the Dataset object"]], "kenning.core.model.ModelWrapper.run_inference": [[5, 2, 2, 0, "X", "The preprocessed inputs for the model"]], "kenning.core.model.ModelWrapper.save_model": [[5, 2, 2, 0, "modelpath", "Path to the model file"]], "kenning.core.model.ModelWrapper.save_to_onnx": [[5, 2, 2, 0, "modelpath", "Path to the ONNX file"]], "kenning.core.model.ModelWrapper.train_model": [[5, 2, 2, 0, "batch_size", "The batch size for the training"], [5, 2, 2, 0, "epochs", "The number of epochs for training"], [5, 2, 2, 0, "learning_rate", "The learning rate for the training"], [5, 2, 2, 0, "logdir", "Path to the logging directory"]], "kenning.core.onnxconversion": [[5, 0, 1, 0, "ONNXConversion", "Creates ONNX conversion support matrix for given framework and models."]], "kenning.core.onnxconversion.ONNXConversion": [[5, 1, 1, 0, "add_entry", "Adds new model for verification."], [5, 1, 1, 0, "check_conversions", "Runs ONNX conversion for every model entry in the list of models."], [5, 1, 1, 0, "onnx_export", "Virtual function for exporting the model to ONNX in a given framework."], [5, 1, 1, 0, "onnx_import", "Virtual function for importing ONNX model to a given framework."], [5, 1, 1, 0, "prepare", "Virtual function for preparing the ONNX conversion test."]], "kenning.core.onnxconversion.ONNXConversion.add_entry": [[5, 2, 2, 0, "kwargs", "Additional arguments that are passed to ModelEntry object as parameters"], [5, 2, 2, 0, "modelgenerator", "Function that generates the model for ONNX conversion in a given framework. The callable should accept no arguments"], [5, 2, 2, 0, "name", "Full name of the model, should match the name of the same models in other framework's implementations"]], "kenning.core.onnxconversion.ONNXConversion.check_conversions": [[5, 2, 2, 0, "modelsdir", "Path to the directory where the intermediate models will be saved."]], "kenning.core.onnxconversion.ONNXConversion.onnx_export": [[5, 2, 2, 0, "exportpath", "Path to the output ONNX file."], [5, 2, 2, 0, "modelentry", "ModelEntry object."]], "kenning.core.onnxconversion.ONNXConversion.onnx_import": [[5, 2, 2, 0, "importpath", "Path to the input ONNX file."], [5, 2, 2, 0, "modelentry", "ModelEntry object."]], "kenning.core.optimizer": [[5, 0, 1, 0, "Optimizer", "Compiles the given model to a different format or runtime."]], "kenning.core.optimizer.Optimizer": [[5, 1, 1, 0, "compile", "Compiles the given model to a target format."], [5, 1, 1, 0, "consult_model_type", "Finds output format of the previous block in the chain matching with an input format of the current block."], [5, 1, 1, 0, "form_argparse", "Creates argparse parser for the Optimizer object."], [5, 1, 1, 0, "form_parameterschema", "Creates schema for the Optimizer class."], [5, 1, 1, 0, "from_argparse", "Constructor wrapper that takes the parameters from argparse args."], [5, 1, 1, 0, "from_json", "Constructor wrapper that takes the parameters from json dict."], [5, 1, 1, 0, "get_framework_and_version", "Returns name of the framework and its version in a form of a tuple."], [5, 1, 1, 0, "get_input_formats", "Returns list of names of possible input formats."], [5, 1, 1, 0, "get_output_formats", "Returns list of names of possible output formats."], [5, 1, 1, 0, "get_spec_path", "Returns input/output specification path for the model saved in modelpath. It concatenates modelpath and .json."], [5, 1, 1, 0, "load_io_specification", "Returns saved input and output specification of a model saved in modelpath if there is one. Otherwise returns None"], [5, 1, 1, 0, "save_io_specification", "Internal function that saves input/output model specification which is used during both inference and compilation. If io_spec is None, the function uses specification of an input model stored in inputmodelpath + .json. If there is no specification stored in this path the function does not do anything."], [5, 1, 1, 0, "set_compiled_model_path", "Sets path for compiled model."], [5, 1, 1, 0, "set_input_type", "Sets input type of the model for the compiler."]], "kenning.core.optimizer.Optimizer.compile": [[5, 2, 2, 0, "inputmodelpath", "Path to the input model"], [5, 2, 2, 0, "io_spec", "Dictionary that has input and output keys that contain list of dictionaries mapping (property name) -> (property value) for the layers"]], "kenning.core.optimizer.Optimizer.consult_model_type": [[5, 2, 2, 0, "previous_block", "Previous block in the optimization chain."]], "kenning.core.optimizer.Optimizer.from_argparse": [[5, 2, 2, 0, "args", "arguments from ArgumentParser object"], [5, 2, 2, 0, "dataset", "The dataset object that is optionally used for optimization"]], "kenning.core.optimizer.Optimizer.from_json": [[5, 2, 2, 0, "dataset", "The dataset object that is optionally used for optimization"], [5, 2, 2, 0, "json_dict", "Arguments for the constructor"]], "kenning.core.optimizer.Optimizer.get_spec_path": [[5, 2, 2, 0, "modelpath", "Path where the model is saved"]], "kenning.core.optimizer.Optimizer.load_io_specification": [[5, 2, 2, 0, "modelpath", "Path to the model which specification the function should read"]], "kenning.core.optimizer.Optimizer.save_io_specification": [[5, 2, 2, 0, "inputmodelpath", "Path to the input model"], [5, 2, 2, 0, "io_spec", "Specification of the input/ouput layers"]], "kenning.core.outputcollector": [[5, 0, 1, 0, "OutputCollector", "Detaches from the output during shutdown"]], "kenning.core.outputcollector.OutputCollector": [[5, 1, 1, 0, "detach_from_output", "Detaches from the output during shutdown"], [5, 1, 1, 0, "form_argparse", "Creates argparse parser for the OutputCollector object."], [5, 1, 1, 0, "from_argparse", "Constructor wrapper that takes the parameters from argparse args."], [5, 1, 1, 0, "from_json", "Constructor wrapper that takes the parameters from json dict."], [5, 1, 1, 0, "process_output", "Returns the infered data back to the specific place/device/connection"], [5, 1, 1, 0, "should_close", "Checks if a specific exit condition was reached"]], "kenning.core.outputcollector.OutputCollector.from_argparse": [[5, 2, 2, 0, "args", "arguments from ArgumentParser object"]], "kenning.core.outputcollector.OutputCollector.from_json": [[5, 2, 2, 0, "inputs_sources", "Input from where data is being retrieved"], [5, 2, 2, 0, "inputs_specs", "Specifications of runner's inputs"], [5, 2, 2, 0, "json_dict", "Arguments for the constructor"], [5, 2, 2, 0, "outputs", "Outputs of this Runner"]], "kenning.core.outputcollector.OutputCollector.process_output": [[5, 2, 2, 0, "input_data", "Data collected from Datacollector that was processed by the model"], [5, 2, 2, 0, "output_data", "Data returned from the model"]], "kenning.core.runner": [[5, 0, 1, 0, "Runner", "Represents an operation block in Kenning Flow."]], "kenning.core.runner.Runner": [[5, 1, 1, 0, "cleanup", "Method that cleans resources after Runner is no longer needed"], [5, 1, 1, 0, "from_json", "Constructor wrapper that takes the parameters from json dict."], [5, 1, 1, 0, "run", "Method used to run this Runner."], [5, 1, 1, 0, "should_close", "Method that checks if Runner got some exit indication (exception etc.) and the flow should close."]], "kenning.core.runner.Runner.from_json": [[5, 2, 2, 0, "inputs_sources", "Input from where data is being retrieved"], [5, 2, 2, 0, "inputs_specs", "Specifications of runner's inputs"], [5, 2, 2, 0, "json_dict", "Arguments for the constructor"], [5, 2, 2, 0, "outputs", "Outputs of this Runner"]], "kenning.core.runner.Runner.run": [[5, 2, 2, 0, "inputs", "Inputs provided to this block"]], "kenning.core.runtime": [[5, 0, 1, 0, "Runtime", "Runtime object provides an API for testing inference on target devices."]], "kenning.core.runtime.Runtime": [[5, 1, 1, 0, "close_server", "Indicates that the server should be closed."], [5, 1, 1, 0, "form_argparse", "Creates argparse parser for the Runtime object."], [5, 1, 1, 0, "form_parameterschema", "Creates schema for the Runtime class."], [5, 1, 1, 0, "from_argparse", "Constructor wrapper that takes the parameters from argparse args."], [5, 1, 1, 0, "from_json", "Constructor wrapper that takes the parameters from json dict."], [5, 1, 1, 0, "get_input_formats", "Returns list of names of possible input formats names."], [5, 1, 1, 0, "get_io_spec_path", "Gets path to a input/output specification file which is modelpath and .json concatenated."], [5, 1, 1, 0, "infer", "Runs inference on single batch locally using a given runtime."], [5, 1, 1, 0, "inference_session_end", "Calling this function indicates that the inference session has ended."], [5, 1, 1, 0, "inference_session_start", "Calling this function indicates that the client is connected."], [5, 1, 1, 0, "postprocess_output", "The method accepts output of the model and postprocesses it."], [5, 1, 1, 0, "prepare_client", "Runs initialization for the client."], [5, 1, 1, 0, "prepare_input", "Loads and converts delivered data to the accelerator for inference."], [5, 1, 1, 0, "prepare_io_specification", "Receives the io_specification from the client in bytes and saves it for later use."], [5, 1, 1, 0, "prepare_local", "Runs initialization for the local inference."], [5, 1, 1, 0, "prepare_model", "Receives the model to infer from the client in bytes."], [5, 1, 1, 0, "prepare_server", "Runs initialization of the server."], [5, 1, 1, 0, "preprocess_input", "The method accepts input_data in bytes and preprocesses it so that it can be passed to the model."], [5, 1, 1, 0, "process_input", "Processes received input and measures the performance quality."], [5, 1, 1, 0, "read_io_specification", "Saves input/output specification so that it can be used during the inference."], [5, 1, 1, 0, "run", "Runs inference on prepared input."], [5, 1, 1, 0, "run_client", "Main runtime client program."], [5, 1, 1, 0, "run_locally", "Runs inference locally using a given runtime."], [5, 1, 1, 0, "run_server", "Main runtime server program."], [5, 1, 1, 0, "upload_essentials", "Wrapper for uploading data to the server. Uploads model by default."], [5, 1, 1, 0, "upload_output", "Returns the output to the client, in bytes."], [5, 1, 1, 0, "upload_stats", "Returns statistics of inference passes to the client."]], "kenning.core.runtime.Runtime.from_argparse": [[5, 2, 2, 0, "args", "arguments from ArgumentParser object"], [5, 2, 2, 0, "protocol", "RuntimeProtocol object"]], "kenning.core.runtime.Runtime.from_json": [[5, 2, 2, 0, "json_dict", "Arguments for the constructor"], [5, 2, 2, 0, "protocol", "RuntimeProtocol object"]], "kenning.core.runtime.Runtime.get_io_spec_path": [[5, 2, 2, 0, "modelpath", "Path to the compiled model"]], "kenning.core.runtime.Runtime.infer": [[5, 2, 2, 0, "X", "Batch of data provided for inference"], [5, 2, 2, 0, "modelwrapper", "Model that is executed on target hardware"], [5, 2, 2, 0, "postprocess", "Indicates if model output should be postprocessed"]], "kenning.core.runtime.Runtime.postprocess_output": [[5, 2, 2, 0, "results", "List of outputs of the model"]], "kenning.core.runtime.Runtime.prepare_input": [[5, 2, 2, 0, "input_data", "Input data in bytes delivered by the client, preprocessed"]], "kenning.core.runtime.Runtime.prepare_io_specification": [[5, 2, 2, 0, "input_data", "io_specification or None, if it should be loaded from another source."]], "kenning.core.runtime.Runtime.prepare_model": [[5, 2, 2, 0, "input_data", "Model data or None, if the model should be loaded from another source."]], "kenning.core.runtime.Runtime.preprocess_input": [[5, 2, 2, 0, "input_data", "Input data in bytes delivered by the client."]], "kenning.core.runtime.Runtime.process_input": [[5, 2, 2, 0, "input_data", "Not used here"]], "kenning.core.runtime.Runtime.read_io_specification": [[5, 2, 2, 0, "io_spec", "Specification of the input/output layers"]], "kenning.core.runtime.Runtime.run_client": [[5, 2, 2, 0, "compiledmodelpath", "Path to the file with a compiled model"], [5, 2, 2, 0, "dataset", "Dataset to verify the inference on"], [5, 2, 2, 0, "modelwrapper", "Model that is executed on target hardware"]], "kenning.core.runtime.Runtime.run_locally": [[5, 2, 2, 0, "compiledmodelpath", "Path to the file with a compiled model"], [5, 2, 2, 0, "dataset", "Dataset to verify the inference on"], [5, 2, 2, 0, "modelwrapper", "Model that is executed on target hardware"]], "kenning.core.runtime.Runtime.upload_essentials": [[5, 2, 2, 0, "compiledmodelpath", "Path to the file with a compiled model"]], "kenning.core.runtime.Runtime.upload_output": [[5, 2, 2, 0, "input_data", "Not used here"]], "kenning.core.runtime.Runtime.upload_stats": [[5, 2, 2, 0, "input_data", "Not used here"]], "kenning.core.runtimeprotocol": [[5, 0, 1, 0, "RuntimeProtocol", "The interface for the communication protocol with the target devices."]], "kenning.core.runtimeprotocol.RuntimeProtocol": [[5, 1, 1, 0, "disconnect", "Ends connection with the other side."], [5, 1, 1, 0, "download_output", "Downloads the outputs from the target device."], [5, 1, 1, 0, "download_statistics", "Downloads inference statistics from the target device."], [5, 1, 1, 0, "form_argparse", "Creates argparse parser for the RuntimeProtocol object."], [5, 1, 1, 0, "form_parameterschema", "Creates schema for the RuntimeProtocol class."], [5, 1, 1, 0, "from_argparse", "Constructor wrapper that takes the parameters from argparse args."], [5, 1, 1, 0, "from_json", "Constructor wrapper that takes the parameters from json dict."], [5, 1, 1, 0, "initialize_client", "Initializes client side of the runtime protocol."], [5, 1, 1, 0, "initialize_server", "Initializes server side of the runtime protocol."], [5, 1, 1, 0, "parse_message", "Parses message received in the wait_for_activity method."], [5, 1, 1, 0, "receive_data", "Gathers data from the client."], [5, 1, 1, 0, "request_failure", "Sends ERROR message back to the client if it failed to handle request."], [5, 1, 1, 0, "request_processing", "Requests processing of input data and waits for acknowledgement."], [5, 1, 1, 0, "request_success", "Sends OK message back to the client once the request is finished."], [5, 1, 1, 0, "send_data", "Sends data to the target device."], [5, 1, 1, 0, "upload_input", "Uploads input to the target device and waits for acknowledgement."], [5, 1, 1, 0, "upload_io_specification", "Uploads input/output specification to the target device."], [5, 1, 1, 0, "upload_model", "Uploads the model to the target device."], [5, 1, 1, 0, "wait_for_activity", "Waits for incoming data from the other side of connection."]], "kenning.core.runtimeprotocol.RuntimeProtocol.from_argparse": [[5, 2, 2, 0, "args", "arguments from RuntimeProtocol object"]], "kenning.core.runtimeprotocol.RuntimeProtocol.from_json": [[5, 2, 2, 0, "json_dict", "Arguments for the constructor"]], "kenning.core.runtimeprotocol.RuntimeProtocol.parse_message": [[5, 2, 2, 0, "message", "Received message"]], "kenning.core.runtimeprotocol.RuntimeProtocol.request_success": [[5, 2, 2, 0, "data", "Optional data upon success, if any"]], "kenning.core.runtimeprotocol.RuntimeProtocol.send_data": [[5, 2, 2, 0, "data", "Data to send"]], "kenning.core.runtimeprotocol.RuntimeProtocol.upload_input": [[5, 2, 2, 0, "data", "Input data for inference"]], "kenning.core.runtimeprotocol.RuntimeProtocol.upload_io_specification": [[5, 2, 2, 0, "path", "Path to the json file"]], "kenning.core.runtimeprotocol.RuntimeProtocol.upload_model": [[5, 2, 2, 0, "path", "Path to the model"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:parameter", "3": "py:attribute", "4": "py:module", "5": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "module", "Python module"], "5": ["py", "function", "Python function"]}, "titleterms": {"us": [0, 4, 6, 10, 11], "ken": [0, 2, 4, 5, 6, 7, 8, 10], "via": 0, "command": [0, 11], "line": 0, "argument": [0, 6], "class": [0, 6], "model": [0, 1, 4, 5, 6, 10, 11], "train": [0, 1], "In": 0, "framework": [0, 4, 9, 10], "infer": [0, 10, 11], "perform": [0, 8, 11], "measur": [0, 5, 8], "onnx": [0, 9], "convers": [0, 9], "test": 0, "target": 0, "hardwar": 0, "run": [0, 4], "gener": [0, 11], "report": [0, 5, 11], "deep": [1, 9], "learn": [1, 9], "deploy": [1, 5], "stack": 1, "from": 1, "dataset": [1, 5, 11], "prepar": 1, "optim": [1, 4, 5, 10], "compil": [1, 4, 11], "introduct": 3, "defin": [4, 6], "pipelin": 4, "json": [4, 7, 11], "specif": [4, 5], "evalu": 4, "its": 4, "nativ": [4, 10], "singl": 4, "devic": 4, "remot": 4, "api": 5, "overview": 5, "process": 5, "i": [5, 6], "o": [5, 6], "data": 5, "flow": 5, "kenningflow": [5, 6, 7], "runner": [5, 6, 7], "modelwrapp": 5, "runtim": [5, 6, 7], "runtimeprotocol": 5, "protocol": 5, "onnxconvers": 5, "dataprovid": 5, "outputcollector": 5, "develop": 6, "block": 6, "metadata": 6, "implement": [6, 7, 10], "new": [6, 10], "compon": 6, "core": 6, "support": [6, 9], "output": 6, "input": 6, "type": [6, 7], "unimpl": 6, "method": 6, "creat": 7, "applic": 7, "structur": [7, 10], "io": 7, "compat": 7, "non": 7, "standard": 7, "name": 7, "map": 7, "exampl": [7, 10], "execut": 7, "metric": [8, 11], "grid": 9, "instal": 10, "modul": 10, "pip": 10, "work": 10, "directli": 10, "repositori": 10, "usag": [10, 11], "case": 10, "benchmark": 10, "tensorflow": [10, 11], "lite": 10, "quantiz": 10, "speed": 10, "up": 10, "apach": 10, "tvm": [10, 11], "autom": 10, "comparison": 10, "librari": 10, "python": 10, "script": 10, "ad": 10, "sampl": 11, "autogener": 11, "pet": 11, "classif": 11, "inform": 11, "build": 11, "local": 11, "cpu": 11, "time": 11, "averag": 11, "memori": 11, "qualiti": 11}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"Using Kenning via command line arguments": [[0, "using-kenning-via-command-line-arguments"]], "Command-line arguments for classes": [[0, "command-line-arguments-for-classes"]], "Model training": [[0, "model-training"]], "In-framework inference performance measurements": [[0, "in-framework-inference-performance-measurements"]], "ONNX conversion": [[0, "onnx-conversion"]], "Testing inference on target hardware": [[0, "testing-inference-on-target-hardware"]], "Running inference": [[0, "running-inference"]], "Generating performance reports": [[0, "generating-performance-reports"]], "Deep Learning deployment stack": [[1, "deep-learning-deployment-stack"]], "From training to deployment": [[1, "from-training-to-deployment"]], "Dataset preparation": [[1, "dataset-preparation"]], "Model preparation and training": [[1, "model-preparation-and-training"]], "Model optimization": [[1, "model-optimization"]], "Model compilation and deployment": [[1, "model-compilation-and-deployment"]], "Kenning": [[2, "kenning"], [10, "kenning"]], "Introduction": [[3, "introduction"]], "Defining optimization pipelines in Kenning": [[4, "defining-optimization-pipelines-in-kenning"]], "JSON specification": [[4, "json-specification"]], "Model evaluation using its native framework": [[4, "model-evaluation-using-its-native-framework"]], "Optimizing and running a model on a single device": [[4, "optimizing-and-running-a-model-on-a-single-device"]], "Compiling a model and running it remotely": [[4, "compiling-a-model-and-running-it-remotely"]], "Kenning API": [[5, "kenning-api"]], "Deployment API overview": [[5, "deployment-api-overview"]], "Model processing": [[5, "model-processing"]], "I/O data flow": [[5, "i-o-data-flow"]], "Data flow reporting": [[5, "data-flow-reporting"]], "KenningFlow": [[5, "kenningflow"]], "Runner": [[5, "runner"]], "Dataset": [[5, "dataset"]], "ModelWrapper": [[5, "modelwrapper"]], "Optimizer": [[5, "optimizer"]], "Runtime": [[5, "runtime"]], "RuntimeProtocol": [[5, "runtimeprotocol"]], "Runtime protocol specification": [[5, "runtime-protocol-specification"]], "RuntimeProtocol API": [[5, "id1"]], "Measurements": [[5, "measurements"]], "ONNXConversion": [[5, "onnxconversion"]], "DataProvider": [[5, "dataprovider"]], "OutputCollector": [[5, "outputcollector"]], "Developing Kenning blocks": [[6, "developing-kenning-blocks"]], "Model and I/O metadata": [[6, "model-and-i-o-metadata"]], "Implementing a new Kenning component": [[6, "implementing-a-new-kenning-component"]], "Defining arguments for core classes": [[6, "defining-arguments-for-core-classes"]], "Defining supported output and input types": [[6, "defining-supported-output-and-input-types"]], "Implementing unimplemented methods": [[6, "implementing-unimplemented-methods"]], "Using the implemented block": [[6, "using-the-implemented-block"]], "Implementing Kenning runtime blocks": [[6, "implementing-kenning-runtime-blocks"]], "Implementing new Runners for KenningFlow": [[6, "implementing-new-runners-for-kenningflow"]], "Creating applications with Kenning": [[7, "creating-applications-with-kenning"]], "JSON structure": [[7, "json-structure"]], "Runner IO": [[7, "runner-io"]], "IO compatibility": [[7, "io-compatibility"]], "IO non-standard types": [[7, "io-non-standard-types"]], "IO names and mapping": [[7, "io-names-and-mapping"]], "Runtime example": [[7, "runtime-example"]], "KenningFlow execution": [[7, "kenningflow-execution"]], "Implemented Runners": [[7, "implemented-runners"]], "Kenning measurements": [[8, "kenning-measurements"]], "Performance metrics": [[8, "performance-metrics"]], "ONNX support in deep learning frameworks": [[9, "onnx-support-in-deep-learning-frameworks"]], "ONNX support grid in deep learning frameworks": [[9, "onnx-support-grid-in-deep-learning-frameworks"]], "ONNX conversion support grid": [[9, "onnx-conversion-support-grid"], [9, "onnx-support-grid"]], "Kenning installation": [[10, "kenning-installation"]], "Module installation with pip": [[10, "module-installation-with-pip"]], "Working directly with the repository": [[10, "working-directly-with-the-repository"]], "Kenning structure": [[10, "kenning-structure"]], "Kenning usage": [[10, "kenning-usage"]], "Example use case of Kenning": [[10, "example-use-case-of-kenning"]], "Benchmarking a model using a native framework": [[10, "benchmarking-a-model-using-a-native-framework"]], "Optimizing a model using TensorFlow Lite": [[10, "optimizing-a-model-using-tensorflow-lite"]], "Quantizing a model using TensorFlow Lite": [[10, "quantizing-a-model-using-tensorflow-lite"]], "Speeding up inference with Apache TVM": [[10, "speeding-up-inference-with-apache-tvm"]], "Automated model comparison": [[10, "automated-model-comparison"]], "Using Kenning as a library in Python scripts": [[10, "using-kenning-as-a-library-in-python-scripts"]], "Adding new implementations": [[10, "adding-new-implementations"]], "Sample autogenerated report": [[11, "sample-autogenerated-report"]], "Pet Dataset classification using TVM-compiled TensorFlow model": [[11, "pet-dataset-classification-using-tvm-compiled-tensorflow-model"]], "Commands used": [[11, "commands-used"]], "General information for build.local-cpu-tvm-tensorflow-classification.json": [[11, "general-information-for-build-local-cpu-tvm-tensorflow-classification-json"]], "Inference performance metrics for build.local-cpu-tvm-tensorflow-classification.json": [[11, "inference-performance-metrics-for-build-local-cpu-tvm-tensorflow-classification-json"]], "Inference time": [[11, "inference-time"]], "Average CPU usage": [[11, "average-cpu-usage"]], "Memory usage": [[11, "memory-usage"]], "Inference quality metrics for build.local-cpu-tvm-tensorflow-classification.json": [[11, "inference-quality-metrics-for-build-local-cpu-tvm-tensorflow-classification-json"]]}, "indexentries": {"dataprovider (class in kenning.core.dataprovider)": [[5, "kenning.core.dataprovider.DataProvider"]], "dataset (class in kenning.core.dataset)": [[5, "kenning.core.dataset.Dataset"]], "kenningflow (class in kenning.core.flow)": [[5, "kenning.core.flow.KenningFlow"]], "measurements (class in kenning.core.measurements)": [[5, "kenning.core.measurements.Measurements"]], "measurementscollector (class in kenning.core.measurements)": [[5, "kenning.core.measurements.MeasurementsCollector"]], "modelwrapper (class in kenning.core.model)": [[5, "kenning.core.model.ModelWrapper"]], "onnxconversion (class in kenning.core.onnxconversion)": [[5, "kenning.core.onnxconversion.ONNXConversion"]], "optimizer (class in kenning.core.optimizer)": [[5, "kenning.core.optimizer.Optimizer"]], "outputcollector (class in kenning.core.outputcollector)": [[5, "kenning.core.outputcollector.OutputCollector"]], "runner (class in kenning.core.runner)": [[5, "kenning.core.runner.Runner"]], "runtime (class in kenning.core.runtime)": [[5, "kenning.core.runtime.Runtime"]], "runtimeprotocol (class in kenning.core.runtimeprotocol)": [[5, "kenning.core.runtimeprotocol.RuntimeProtocol"]], "systemstatscollector (class in kenning.core.measurements)": [[5, "kenning.core.measurements.SystemStatsCollector"]], "_dataindex (kenning.core.dataset.dataset attribute)": [[5, "kenning.core.dataset.Dataset._dataindex"]], "accumulate() (kenning.core.measurements.measurements method)": [[5, "kenning.core.measurements.Measurements.accumulate"]], "add_entry() (kenning.core.onnxconversion.onnxconversion method)": [[5, "kenning.core.onnxconversion.ONNXConversion.add_entry"]], "add_measurement() (kenning.core.measurements.measurements method)": [[5, "kenning.core.measurements.Measurements.add_measurement"]], "add_measurements_list() (kenning.core.measurements.measurements method)": [[5, "kenning.core.measurements.Measurements.add_measurements_list"]], "batch_size (kenning.core.dataset.dataset attribute)": [[5, "kenning.core.dataset.Dataset.batch_size"]], "calibration_dataset_generator() (kenning.core.dataset.dataset method)": [[5, "kenning.core.dataset.Dataset.calibration_dataset_generator"]], "check_conversions() (kenning.core.onnxconversion.onnxconversion method)": [[5, "kenning.core.onnxconversion.ONNXConversion.check_conversions"]], "cleanup() (kenning.core.runner.runner method)": [[5, "kenning.core.runner.Runner.cleanup"]], "clear() (kenning.core.measurements.measurements method)": [[5, "kenning.core.measurements.Measurements.clear"]], "clear() (kenning.core.measurements.measurementscollector class method)": [[5, "kenning.core.measurements.MeasurementsCollector.clear"]], "close_server() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.close_server"]], "compile() (kenning.core.optimizer.optimizer method)": [[5, "kenning.core.optimizer.Optimizer.compile"]], "consult_model_type() (kenning.core.optimizer.optimizer method)": [[5, "kenning.core.optimizer.Optimizer.consult_model_type"]], "convert_input_to_bytes() (kenning.core.model.modelwrapper method)": [[5, "kenning.core.model.ModelWrapper.convert_input_to_bytes"]], "convert_output_from_bytes() (kenning.core.model.modelwrapper method)": [[5, "kenning.core.model.ModelWrapper.convert_output_from_bytes"]], "data (kenning.core.measurements.measurements attribute)": [[5, "kenning.core.measurements.Measurements.data"]], "datax (kenning.core.dataset.dataset attribute)": [[5, "kenning.core.dataset.Dataset.dataX"]], "datay (kenning.core.dataset.dataset attribute)": [[5, "kenning.core.dataset.Dataset.dataY"]], "derive_io_spec_from_json_params() (kenning.core.model.modelwrapper class method)": [[5, "kenning.core.model.ModelWrapper.derive_io_spec_from_json_params"]], "detach_from_output() (kenning.core.outputcollector.outputcollector method)": [[5, "kenning.core.outputcollector.OutputCollector.detach_from_output"]], "detach_from_source() (kenning.core.dataprovider.dataprovider method)": [[5, "kenning.core.dataprovider.DataProvider.detach_from_source"]], "disconnect() (kenning.core.runtimeprotocol.runtimeprotocol method)": [[5, "kenning.core.runtimeprotocol.RuntimeProtocol.disconnect"]], "download_dataset_fun() (kenning.core.dataset.dataset method)": [[5, "kenning.core.dataset.Dataset.download_dataset_fun"]], "download_output() (kenning.core.runtimeprotocol.runtimeprotocol method)": [[5, "kenning.core.runtimeprotocol.RuntimeProtocol.download_output"]], "download_statistics() (kenning.core.runtimeprotocol.runtimeprotocol method)": [[5, "kenning.core.runtimeprotocol.RuntimeProtocol.download_statistics"]], "evaluate() (kenning.core.dataset.dataset method)": [[5, "kenning.core.dataset.Dataset.evaluate"]], "fetch_input() (kenning.core.dataprovider.dataprovider method)": [[5, "kenning.core.dataprovider.DataProvider.fetch_input"]], "form_argparse() (kenning.core.dataprovider.dataprovider class method)": [[5, "kenning.core.dataprovider.DataProvider.form_argparse"]], "form_argparse() (kenning.core.dataset.dataset class method)": [[5, "kenning.core.dataset.Dataset.form_argparse"]], "form_argparse() (kenning.core.model.modelwrapper class method)": [[5, "kenning.core.model.ModelWrapper.form_argparse"]], "form_argparse() (kenning.core.optimizer.optimizer class method)": [[5, "kenning.core.optimizer.Optimizer.form_argparse"]], "form_argparse() (kenning.core.outputcollector.outputcollector class method)": [[5, "kenning.core.outputcollector.OutputCollector.form_argparse"]], "form_argparse() (kenning.core.runtime.runtime class method)": [[5, "kenning.core.runtime.Runtime.form_argparse"]], "form_argparse() (kenning.core.runtimeprotocol.runtimeprotocol class method)": [[5, "kenning.core.runtimeprotocol.RuntimeProtocol.form_argparse"]], "form_parameterschema() (kenning.core.dataset.dataset class method)": [[5, "kenning.core.dataset.Dataset.form_parameterschema"]], "form_parameterschema() (kenning.core.flow.kenningflow class method)": [[5, "kenning.core.flow.KenningFlow.form_parameterschema"]], "form_parameterschema() (kenning.core.model.modelwrapper class method)": [[5, "kenning.core.model.ModelWrapper.form_parameterschema"]], "form_parameterschema() (kenning.core.optimizer.optimizer class method)": [[5, "kenning.core.optimizer.Optimizer.form_parameterschema"]], "form_parameterschema() (kenning.core.runtime.runtime class method)": [[5, "kenning.core.runtime.Runtime.form_parameterschema"]], "form_parameterschema() (kenning.core.runtimeprotocol.runtimeprotocol class method)": [[5, "kenning.core.runtimeprotocol.RuntimeProtocol.form_parameterschema"]], "from_argparse() (kenning.core.dataprovider.dataprovider class method)": [[5, "kenning.core.dataprovider.DataProvider.from_argparse"]], "from_argparse() (kenning.core.dataset.dataset class method)": [[5, "kenning.core.dataset.Dataset.from_argparse"]], "from_argparse() (kenning.core.model.modelwrapper class method)": [[5, "kenning.core.model.ModelWrapper.from_argparse"]], "from_argparse() (kenning.core.optimizer.optimizer class method)": [[5, "kenning.core.optimizer.Optimizer.from_argparse"]], "from_argparse() (kenning.core.outputcollector.outputcollector class method)": [[5, "kenning.core.outputcollector.OutputCollector.from_argparse"]], "from_argparse() (kenning.core.runtime.runtime class method)": [[5, "kenning.core.runtime.Runtime.from_argparse"]], "from_argparse() (kenning.core.runtimeprotocol.runtimeprotocol class method)": [[5, "kenning.core.runtimeprotocol.RuntimeProtocol.from_argparse"]], "from_json() (kenning.core.dataset.dataset class method)": [[5, "kenning.core.dataset.Dataset.from_json"]], "from_json() (kenning.core.flow.kenningflow class method)": [[5, "kenning.core.flow.KenningFlow.from_json"]], "from_json() (kenning.core.model.modelwrapper class method)": [[5, "kenning.core.model.ModelWrapper.from_json"]], "from_json() (kenning.core.optimizer.optimizer class method)": [[5, "kenning.core.optimizer.Optimizer.from_json"]], "from_json() (kenning.core.outputcollector.outputcollector class method)": [[5, "kenning.core.outputcollector.OutputCollector.from_json"]], "from_json() (kenning.core.runner.runner class method)": [[5, "kenning.core.runner.Runner.from_json"]], "from_json() (kenning.core.runtime.runtime class method)": [[5, "kenning.core.runtime.Runtime.from_json"]], "from_json() (kenning.core.runtimeprotocol.runtimeprotocol class method)": [[5, "kenning.core.runtimeprotocol.RuntimeProtocol.from_json"]], "get_class_names() (kenning.core.dataset.dataset method)": [[5, "kenning.core.dataset.Dataset.get_class_names"]], "get_data() (kenning.core.dataset.dataset method)": [[5, "kenning.core.dataset.Dataset.get_data"]], "get_data_unloaded() (kenning.core.dataset.dataset method)": [[5, "kenning.core.dataset.Dataset.get_data_unloaded"]], "get_framework_and_version() (kenning.core.model.modelwrapper method)": [[5, "kenning.core.model.ModelWrapper.get_framework_and_version"]], "get_framework_and_version() (kenning.core.optimizer.optimizer method)": [[5, "kenning.core.optimizer.Optimizer.get_framework_and_version"]], "get_input_formats() (kenning.core.optimizer.optimizer method)": [[5, "kenning.core.optimizer.Optimizer.get_input_formats"]], "get_input_formats() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.get_input_formats"]], "get_input_mean_std() (kenning.core.dataset.dataset method)": [[5, "kenning.core.dataset.Dataset.get_input_mean_std"]], "get_io_spec_path() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.get_io_spec_path"]], "get_io_specification() (kenning.core.model.modelwrapper method)": [[5, "kenning.core.model.ModelWrapper.get_io_specification"]], "get_io_specification_from_model() (kenning.core.model.modelwrapper method)": [[5, "kenning.core.model.ModelWrapper.get_io_specification_from_model"]], "get_measurements() (kenning.core.measurements.systemstatscollector method)": [[5, "kenning.core.measurements.SystemStatsCollector.get_measurements"]], "get_output_formats() (kenning.core.model.modelwrapper method)": [[5, "kenning.core.model.ModelWrapper.get_output_formats"]], "get_output_formats() (kenning.core.optimizer.optimizer method)": [[5, "kenning.core.optimizer.Optimizer.get_output_formats"]], "get_path() (kenning.core.model.modelwrapper method)": [[5, "kenning.core.model.ModelWrapper.get_path"]], "get_spec_path() (kenning.core.optimizer.optimizer method)": [[5, "kenning.core.optimizer.Optimizer.get_spec_path"]], "get_values() (kenning.core.measurements.measurements method)": [[5, "kenning.core.measurements.Measurements.get_values"]], "infer() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.infer"]], "inference_session_end() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.inference_session_end"]], "inference_session_start() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.inference_session_start"]], "initialize_client() (kenning.core.runtimeprotocol.runtimeprotocol method)": [[5, "kenning.core.runtimeprotocol.RuntimeProtocol.initialize_client"]], "initialize_measurement() (kenning.core.measurements.measurements method)": [[5, "kenning.core.measurements.Measurements.initialize_measurement"]], "initialize_server() (kenning.core.runtimeprotocol.runtimeprotocol method)": [[5, "kenning.core.runtimeprotocol.RuntimeProtocol.initialize_server"]], "kenning.core.measurements": [[5, "module-kenning.core.measurements"]], "load_io_specification() (kenning.core.optimizer.optimizer method)": [[5, "kenning.core.optimizer.Optimizer.load_io_specification"]], "load_model() (kenning.core.model.modelwrapper method)": [[5, "kenning.core.model.ModelWrapper.load_model"]], "module": [[5, "module-kenning.core.measurements"]], "onnx_export() (kenning.core.onnxconversion.onnxconversion method)": [[5, "kenning.core.onnxconversion.ONNXConversion.onnx_export"]], "onnx_import() (kenning.core.onnxconversion.onnxconversion method)": [[5, "kenning.core.onnxconversion.ONNXConversion.onnx_import"]], "parse_io_specification_from_json() (kenning.core.model.modelwrapper class method)": [[5, "kenning.core.model.ModelWrapper.parse_io_specification_from_json"]], "parse_message() (kenning.core.runtimeprotocol.runtimeprotocol method)": [[5, "kenning.core.runtimeprotocol.RuntimeProtocol.parse_message"]], "postprocess_output() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.postprocess_output"]], "postprocess_outputs() (kenning.core.model.modelwrapper method)": [[5, "kenning.core.model.ModelWrapper.postprocess_outputs"]], "prepare() (kenning.core.dataprovider.dataprovider method)": [[5, "kenning.core.dataprovider.DataProvider.prepare"]], "prepare() (kenning.core.dataset.dataset method)": [[5, "kenning.core.dataset.Dataset.prepare"]], "prepare() (kenning.core.onnxconversion.onnxconversion method)": [[5, "kenning.core.onnxconversion.ONNXConversion.prepare"]], "prepare_client() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.prepare_client"]], "prepare_external_calibration_dataset() (kenning.core.dataset.dataset method)": [[5, "kenning.core.dataset.Dataset.prepare_external_calibration_dataset"]], "prepare_input() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.prepare_input"]], "prepare_input_samples() (kenning.core.dataset.dataset method)": [[5, "kenning.core.dataset.Dataset.prepare_input_samples"]], "prepare_io_specification() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.prepare_io_specification"]], "prepare_local() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.prepare_local"]], "prepare_model() (kenning.core.model.modelwrapper method)": [[5, "kenning.core.model.ModelWrapper.prepare_model"]], "prepare_model() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.prepare_model"]], "prepare_output_samples() (kenning.core.dataset.dataset method)": [[5, "kenning.core.dataset.Dataset.prepare_output_samples"]], "prepare_server() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.prepare_server"]], "preprocess_input() (kenning.core.dataprovider.dataprovider method)": [[5, "kenning.core.dataprovider.DataProvider.preprocess_input"]], "preprocess_input() (kenning.core.model.modelwrapper method)": [[5, "kenning.core.model.ModelWrapper.preprocess_input"]], "preprocess_input() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.preprocess_input"]], "process_input() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.process_input"]], "process_output() (kenning.core.outputcollector.outputcollector method)": [[5, "kenning.core.outputcollector.OutputCollector.process_output"]], "read_io_specification() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.read_io_specification"]], "receive_data() (kenning.core.runtimeprotocol.runtimeprotocol method)": [[5, "kenning.core.runtimeprotocol.RuntimeProtocol.receive_data"]], "request_failure() (kenning.core.runtimeprotocol.runtimeprotocol method)": [[5, "kenning.core.runtimeprotocol.RuntimeProtocol.request_failure"]], "request_processing() (kenning.core.runtimeprotocol.runtimeprotocol method)": [[5, "kenning.core.runtimeprotocol.RuntimeProtocol.request_processing"]], "request_success() (kenning.core.runtimeprotocol.runtimeprotocol method)": [[5, "kenning.core.runtimeprotocol.RuntimeProtocol.request_success"]], "run() (kenning.core.flow.kenningflow method)": [[5, "kenning.core.flow.KenningFlow.run"]], "run() (kenning.core.measurements.systemstatscollector method)": [[5, "kenning.core.measurements.SystemStatsCollector.run"]], "run() (kenning.core.runner.runner method)": [[5, "kenning.core.runner.Runner.run"]], "run() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.run"]], "run_client() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.run_client"]], "run_inference() (kenning.core.model.modelwrapper method)": [[5, "kenning.core.model.ModelWrapper.run_inference"]], "run_locally() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.run_locally"]], "run_server() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.run_server"]], "run_single_step() (kenning.core.flow.kenningflow method)": [[5, "kenning.core.flow.KenningFlow.run_single_step"]], "save_io_specification() (kenning.core.optimizer.optimizer method)": [[5, "kenning.core.optimizer.Optimizer.save_io_specification"]], "save_measurements() (kenning.core.measurements.measurementscollector class method)": [[5, "kenning.core.measurements.MeasurementsCollector.save_measurements"]], "save_model() (kenning.core.model.modelwrapper method)": [[5, "kenning.core.model.ModelWrapper.save_model"]], "save_to_onnx() (kenning.core.model.modelwrapper method)": [[5, "kenning.core.model.ModelWrapper.save_to_onnx"]], "send_data() (kenning.core.runtimeprotocol.runtimeprotocol method)": [[5, "kenning.core.runtimeprotocol.RuntimeProtocol.send_data"]], "set_batch_size() (kenning.core.dataset.dataset method)": [[5, "kenning.core.dataset.Dataset.set_batch_size"]], "set_compiled_model_path() (kenning.core.optimizer.optimizer method)": [[5, "kenning.core.optimizer.Optimizer.set_compiled_model_path"]], "set_input_type() (kenning.core.optimizer.optimizer method)": [[5, "kenning.core.optimizer.Optimizer.set_input_type"]], "should_close() (kenning.core.outputcollector.outputcollector method)": [[5, "kenning.core.outputcollector.OutputCollector.should_close"]], "should_close() (kenning.core.runner.runner method)": [[5, "kenning.core.runner.Runner.should_close"]], "systemstatsmeasurements() (in module kenning.core.measurements)": [[5, "kenning.core.measurements.systemstatsmeasurements"]], "tagmeasurements() (in module kenning.core.measurements)": [[5, "kenning.core.measurements.tagmeasurements"]], "test_inference() (kenning.core.model.modelwrapper method)": [[5, "kenning.core.model.ModelWrapper.test_inference"]], "timemeasurements() (in module kenning.core.measurements)": [[5, "kenning.core.measurements.timemeasurements"]], "train_model() (kenning.core.model.modelwrapper method)": [[5, "kenning.core.model.ModelWrapper.train_model"]], "train_test_split_representations() (kenning.core.dataset.dataset method)": [[5, "kenning.core.dataset.Dataset.train_test_split_representations"]], "update_measurements() (kenning.core.measurements.measurements method)": [[5, "kenning.core.measurements.Measurements.update_measurements"]], "upload_essentials() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.upload_essentials"]], "upload_input() (kenning.core.runtimeprotocol.runtimeprotocol method)": [[5, "kenning.core.runtimeprotocol.RuntimeProtocol.upload_input"]], "upload_io_specification() (kenning.core.runtimeprotocol.runtimeprotocol method)": [[5, "kenning.core.runtimeprotocol.RuntimeProtocol.upload_io_specification"]], "upload_model() (kenning.core.runtimeprotocol.runtimeprotocol method)": [[5, "kenning.core.runtimeprotocol.RuntimeProtocol.upload_model"]], "upload_output() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.upload_output"]], "upload_stats() (kenning.core.runtime.runtime method)": [[5, "kenning.core.runtime.Runtime.upload_stats"]], "wait_for_activity() (kenning.core.runtimeprotocol.runtimeprotocol method)": [[5, "kenning.core.runtimeprotocol.RuntimeProtocol.wait_for_activity"]]}, "docurls": ["cmd-usage.html", "dl-deployment-stack.html", "index.html", "introduction.html", "json-scenarios.html", "kenning-api.html", "kenning-development.html", "kenning-flow.html", "kenning-measurements.html", "onnx-conversion-support.html", "project-readme.html", "sample-report.html"]})